.show-payment
  .show-payment-block
    .proc-head
      .proc-logo
      .proc-text
        UID Check

    - I18n.available_locales.each do |locale|
      - if I18n.locale == locale
        = locale
      - else
        = link_to locale, url_for(locale: locale, uuid: payment.uuid, signature: payment.signature)

    .mt-4
      .proc-shop-block
        .proc-shop-title
          = t('payments.withdraw.attributes.merchant')
        .proc-shop-content
          = payment.merchant.name

    .proc-shop-block
      .proc-order-title
        = t('payments.order')
      .proc-order-content
        = payment.external_order_id

    .proc-order-block
      .proc-order-title
        = t('payments.withdraw.attributes.amount')
      .proc-order-content
        = "#{payment.decorate.national_formatted} #{payment.national_currency}"

    .please-pay-from-bank
      = t('payments.withdraw.attributes.choosing_bank_card')
      = "(#{ payment.decorate.national_formatted } #{ payment.national_currency })"

    = render 'payments/errors', payment: payment

    = simple_form_for payment, url: payments_statuses_withdrawal_path(uuid: payment.uuid, signature:), action: :update do |f|

      .select-payment-system
        = f.label :payment_system, t('payments.withdraw.attributes.bank')
        = f.select :payment_system, payment_systems_collection_for_payment(payment),
                                    { include_blank: t('payments.choise') },
                                    class: 'grey-drop-down mb-3'

      .select-payment-system
        
        = f.label :card_number, t('payments.withdraw.attributes.card_number')
        = f.text_field :card_number, data: { controller: 'inputmask--card-number', 'inputmask--card-number-target': 'input' }, class: "grey-cardplace"
                

      = hidden_field_tag :event, 'search' 

      .mt-4
        = f.submit t('payments.confirm'), class: "green-button"

    .mt-4
      = render 'payments/cancel_form', payment:, signature:, url: payments_statuses_withdrawal_path(uuid: payment.uuid, signature:)

    = render 'payments/uuid', payment:

  - if payment.arbitration
    = render 'shared/chat', payment:
