#
services:

  postgres:
    image: postgres:14.5-bullseye
    restart: unless-stopped
    env_file: ./ppay_app/.env
    #environment:
    #  POSTGRES_USER: ${POSTGRES_USER}
    #  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    #  POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
      #- ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql

  redis:
    image: redis:7.0.5-bullseye
    restart: unless-stopped
    env_file: ./ppay_app/.env
    volumes:
      - redis_data:/data

  worker:
    build:
      context: ./ppay_app
      dockerfile: Dockerfile
    depends_on:
      - app 
      - postgres
      - redis
    env_file: ./ppay_app/.env
    #environment:
    #  RAILS_ENV: production
    entrypoint: ./entrypoint-sidekiq.sh
    #image: cloud.canister.io:5000/ffyy289/ppay_app_sidekiq:latest
    restart: unless-stopped
    volumes:
      - ./ppay_app:/app
      - gem_cache:/usr/local/bundle/gems
      - node_modules:/app/node_modules

  app:
    build:
      context: ./ppay_app
      dockerfile: Dockerfile
    depends_on:     
      - postgres
      - redis
    ports:
      - 3000:3000
    env_file: ./ppay_app/.env
    entrypoint: ./entrypoint-rails.sh
    image: cloud.canister.io:5000/ffyy289/ppay_app:latest
    volumes:
      - ./ppay_app:/app
      - gem_cache:/usr/local/bundle/gems
      - node_modules:/app/node_modules
      - app_public_files:/app/public

  nginx:    
    build:
      context: ./nginx 
      dockerfile: Dockerfile_nginx
    depends_on:
      - app
      - postgres
      - redis
    ports:      
      - 80:80
    #image: cloud.canister.io:5000/ffyy289/ppay_app_nginx:latest
    volumes:
      # We need to map this so Nginx can read the public files
      - app_public_files:/app/public:ro

volumes:
  gem_cache:
  db_data:
  node_modules:
  redis_data:
  app_public_files:
